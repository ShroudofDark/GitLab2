plugins {
	id 'java'
	id "org.xbib.gradle.plugin.git" version "2.0.0"
}

java {
	sourceCompatibility = JavaVersion.toVersion(11)
    targetCompatibility = JavaVersion.toVersion(11)
}

repositories {
	mavenCentral()
	//jcenter() //got depreciation warnings use this
}

dependencies {
	testImplementation 'org.junit.jupiter:junit-jupiter:5.7.0'
	testImplementation 'org.hamcrest:hamcrest-library:2.2'
}

test {
	ignoreFailures = true
	useJUnitPlatform()
}

//Report Website Creation stuff
/* I couldn't get this process as a whole to work even with tweaking and went to class mate for assistance
task clonePages() {
    doLast {  
		mkdir 'build/gh-pages'
        def thisRepo = rootProject.projectDir.toString()
        def pagesDir = "$buildDir/gh-pages"
        project.delete {
            delete pagesDir
        }
        def grgit = git.clone {
            dir = pagesDir
            uri = thisRepo //uri = 'file:' + thisRepo
            bare = false
            refToCheckout = 'gh-pages'
        }
        grgit.checkout {
            branch = 'gh-pages'
        }
		grgit.close();
    }
}

task reports (dependsOn: ['javadoc', 'test']){
	description 'Generate reports for this project'
}

task copyDocs (type: Copy, dependsOn: ['reports', 'clonePages']) {
	from "build/docs/"
	into "$buildDir/gh-pages/docs/"
}

task copyReports (type: Copy, dependsOn: ['reports', 'clonePages']) {
	from "build/reports/"
	into "$buildDir/gh-pages/reports"
}

task deployReports (dependsOn: ['reports', 'copyDocs', 'copyReports']){
	group = "Reporting"
	description  'Copies reports to the gh-pages branch in preparation for a future push to GitHub'
	doLast {
		def pagesDir = "$buildDir/gh-pages"
		def grgit = git.open {
			dir = pagesDir + "/.git"
		}
		//grgit.add (patterns: ['reports/'], update: false)
		//grgit.add (patterns: ['reports/'], update: true)
		grgit.add (update: false, patterns: ['reports/'])
        grgit.add (update: true, patterns: ['reports/'])
		grgit.commit {
			message = "Updating web pages"
		}
		
		grgit.close();
	}
}

build.dependsOn deployReports */

// Commands to run programs as subprocesses adapted from code at
// https://www.baeldung.com/run-shell-command-in-java.
//
// Had help from John Hicks because above stuff wasn't working

task reports (dependsOn: ['javadoc', 'test']) {
    description 'Generate reports for this project'
}

task copyDocs (type: Copy, dependsOn: ['reports', 'gitWorktree']) {
    from 'build/docs'
    into '../_site/docs'
}

task copyReports (type: Copy, dependsOn: ['reports', 'gitWorktree']) {
    from 'build/reports'
    into '../_site/reports'
}

task gitWorktree() {
    description 'Adds a worktree for the gh-pages branch to the _site directory'
    Process process;
    process = Runtime.getRuntime()
        .exec(String.format("git worktree add " + System.getProperty("user.dir") + "/imitation/	gh-pages"));
    int exitCode = process.waitFor();
}

task deployReports (dependsOn: ['reports', 'gitWorktree', 'copyDocs', 'copyReports' ]) {
    description 'Adds and commits the project website assets in the _site worktree'
    doLast {
        ProcessBuilder addCommandbuilder = new ProcessBuilder();
		//System.out.println(System.getProperty("user.dir").toString())
        addCommandbuilder.directory(new File(System.getProperty("user.dir") + "/_site")); // TODO: windows?
        addCommandbuilder.command("git", "add", ".");
        Process addProcess = addCommandbuilder.start();
        int addExitCode = addProcess.waitFor();

        ProcessBuilder commitCommandBuilder = new ProcessBuilder();
        commitCommandBuilder.directory(new File(System.getProperty("user.dir") + "/_site")); // TODO: windows?
        commitCommandBuilder.command("git", "commit", "-m", "Updates website from Gradle task");
        Process commitProcess = commitCommandBuilder.start();
        int commitExitCode = commitProcess.waitFor();
    }
}

build.dependsOn deployReports